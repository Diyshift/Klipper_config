#####################################################################
#	Macros
#####################################################################



[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}


#[gcode_macro LED_EFFECTS]
#gcode:
 #   G90
 #   SET_LED_EFFECT EFFECT=status_idle STOP=1
 #   SET_LED_EFFECT EFFECT=status_heating_abs
  #  SET_LED_EFFECT EFFECT=status_homing
  #  G4 P4000
  #  SET_LED_EFFECT EFFECT=status_homing STOP=1
  #  SET_LED_EFFECT EFFECT=status_leveling
  #  G4 P4000
 #   SET_LED_EFFECT EFFECT=status_leveling STOP=1
  #  SET_LED_EFFECT EFFECT=status_meshing
 #   G4 P4000
  #  SET_LED_EFFECT EFFECT=status_meshing STOP=1
  #  SET_LED_EFFECT EFFECT=nozzle_printing
  #  SET_LED_EFFECT EFFECT=status_heating_abs STOP=1
  #  SET_LED_EFFECT EFFECT=status_printing_abs
  #  G4 P4000
  #  STOP_LED_EFFECTS
 #   SET_LED_EFFECT EFFECT=status_idle




[gcode_macro PURGE_LINE]
gcode:  
    G92 E0
    G90
    G0 X5 Y5 F6000
    ###M117 Heating extruder...
    #M109 S{EXTRUDER}                    ; set final hotend temperature and wait for it to be reached
    #M117 Purging...
    G0 Z0.3
    G91
    G1 X80 E19 F1200
    G1 Y1
    G1 X-80 E19 F1200
    G1 E-.5 F3000                  ; retract slightly to try and reduce stringing
    G92 E0
    G90


[gcode_macro calibrate_z]
gcode:
   PROBE_CALIBRATE
[gcode_macro down_0.1]
gcode:
   TESTZ Z=-0.1

[gcode_macro down_1.0]
gcode:
   TESTZ Z=-1.0

[gcode_macro load_filament]
gcode:
    G1 E665 F3000
    #M117 Loading Filament...
[gcode_macro unload_filament]
gcode:
    M109 S{215|int}
    G1 E10 F2000
    SET_LED_EFFECT EFFECT=critical_error
    G1 E-700 F3000
    #M117 Unloading Filament...


[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    
    
    ##	Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##	Uncomment for 250mm build
    G0 X110 Y110 Z30 F3600
    
    
    #--------------------------------------------------------------------
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    {% set BED = params.BED|default(60)|int %}
    {% set EXTRUDER = params.EXTRUDER|default(210)|int %}
    BED_MESH_CLEAR
    BED_MESH_PROFILE LOAD=default
    
    
    #M117 Warmup
    M190 S{BED}                        ; set bed temp and wait for it reach temp
    M109 S{EXTRUDER|int}
    G32
    G0 Y5 X5                ;move to prevent dribble on print surface
    ##M117 Creating Bed Mesh
    #BED_MESH_CALIBRATE
                  ; M109 heat and wait for it to reach temp
    #M117 Starting Print
                                ; home all axes
    G1 Z20 F3000                   ; move nozzle away from bed 
    
    G90
    #G1 E10 F1000
     
    #STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=status_heater stop=1
    SET_LED_EFFECT EFFECT=bed_heater stop=1
    G4 P100
    lights_on_cool
    case_lights_cool
    M117 Purging
    PURGE_LINE
    M117 Heey You Guyyys
   #G1 E-2 F500            ; Retract a little

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10 F3600                 ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X180 Y180 F3600            ; park nozzle at rear
    G91                            ; set to relative
    G1 Z50 F3000                   ; move down to access print
    G90
    BED_MESH_CLEAR
    #M117 Print Complete

[gcode_shell_command backup_cfg]
command: bash /home/pi/klipper_config/autocommit.sh
timeout: 30.
verbose: True

[gcode_macro GIT_BACKUP]
gcode:
  RUN_SHELL_COMMAND CMD=backup_cfg

#UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=120  #shuts down after 2 mins

####################################################################
#	Pause/Resume/M600
#####################################################################

[gcode_macro M600]
gcode:
    
    PAUSE                ; Pause

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT
